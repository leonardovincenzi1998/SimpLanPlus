// Generated from SVM.g4 by ANTLR 4.4
package parser;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class SVMLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__3=1, T__2=2, T__1=3, T__0=4, PUSH=5, POP=6, TOP=7, LI=8, MOVE=9, LW=10, 
		SW=11, LB=12, SB=13, ADD=14, ADDI=15, SUB=16, SUBI=17, MULT=18, MULTI=19, 
		DIV=20, DIVI=21, BGT=22, BGEQ=23, BLEQ=24, BLT=25, BNE=26, AND=27, OR=28, 
		NOT=29, NEG=30, PRINT=31, RET=32, BEQ=33, LABEL_INSTRUCTION=34, JAL=35, 
		BRANCH=36, JR=37, HALT=38, UNDERSCORE=39, NUMBER=40, LABEL=41, REG=42, 
		WHITESP=43, LINECOMMENTS=44, ERR=45;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'"
	};
	public static final String[] ruleNames = {
		"T__3", "T__2", "T__1", "T__0", "PUSH", "POP", "TOP", "LI", "MOVE", "LW", 
		"SW", "LB", "SB", "ADD", "ADDI", "SUB", "SUBI", "MULT", "MULTI", "DIV", 
		"DIVI", "BGT", "BGEQ", "BLEQ", "BLT", "BNE", "AND", "OR", "NOT", "NEG", 
		"PRINT", "RET", "BEQ", "LABEL_INSTRUCTION", "JAL", "BRANCH", "JR", "HALT", 
		"CHAR", "DIGIT", "UNDERSCORE", "NUMBER", "LABEL", "REG", "WHITESP", "LINECOMMENTS", 
		"ERR"
	};


	public int lexicalErrors=0;


	public SVMLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "SVM.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 46: ERR_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void ERR_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0:  System.err.println("Invalid char: "+ getText()); lexicalErrors++;   break;
		}
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2/\u013f\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3"+
		"\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n"+
		"\3\n\3\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\17"+
		"\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22"+
		"\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24"+
		"\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\30"+
		"\3\30\3\30\3\30\3\30\3\31\3\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\33"+
		"\3\33\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36\3\36"+
		"\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3#"+
		"\3#\3#\3#\3#\3#\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3&\3&\3&\3\'\3\'\3\'"+
		"\3\'\3\'\3(\3(\3)\3)\3*\3*\3+\5+\u0105\n+\3+\3+\3+\7+\u010a\n+\f+\16+"+
		"\u010d\13+\5+\u010f\n+\3,\3,\3,\3,\7,\u0115\n,\f,\16,\u0118\13,\3-\3-"+
		"\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u0129\n-\3.\6.\u012c\n.\r."+
		"\16.\u012d\3.\3.\3/\3/\7/\u0134\n/\f/\16/\u0137\13/\3/\3/\3\60\3\60\3"+
		"\60\3\60\3\60\2\2\61\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27"+
		"\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33"+
		"\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O\2Q\2S)U*W+Y,[-]._/\3\2\5\4\2"+
		"C\\c|\5\2\13\f\17\17\"\"\4\2\f\f\17\17\u014a\2\3\3\2\2\2\2\5\3\2\2\2\2"+
		"\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2"+
		"\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2"+
		"\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2"+
		"\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2"+
		"\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2"+
		"\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2"+
		"M\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3"+
		"\2\2\2\2_\3\2\2\2\3a\3\2\2\2\5d\3\2\2\2\7f\3\2\2\2\th\3\2\2\2\13j\3\2"+
		"\2\2\ro\3\2\2\2\17s\3\2\2\2\21w\3\2\2\2\23z\3\2\2\2\25\177\3\2\2\2\27"+
		"\u0082\3\2\2\2\31\u0085\3\2\2\2\33\u0088\3\2\2\2\35\u008b\3\2\2\2\37\u008f"+
		"\3\2\2\2!\u0094\3\2\2\2#\u0098\3\2\2\2%\u009d\3\2\2\2\'\u00a2\3\2\2\2"+
		")\u00a8\3\2\2\2+\u00ac\3\2\2\2-\u00b1\3\2\2\2/\u00b5\3\2\2\2\61\u00ba"+
		"\3\2\2\2\63\u00bf\3\2\2\2\65\u00c3\3\2\2\2\67\u00c7\3\2\2\29\u00cb\3\2"+
		"\2\2;\u00ce\3\2\2\2=\u00d2\3\2\2\2?\u00d6\3\2\2\2A\u00dc\3\2\2\2C\u00e0"+
		"\3\2\2\2E\u00e4\3\2\2\2G\u00ea\3\2\2\2I\u00ee\3\2\2\2K\u00f5\3\2\2\2M"+
		"\u00f8\3\2\2\2O\u00fd\3\2\2\2Q\u00ff\3\2\2\2S\u0101\3\2\2\2U\u0104\3\2"+
		"\2\2W\u0110\3\2\2\2Y\u0119\3\2\2\2[\u012b\3\2\2\2]\u0131\3\2\2\2_\u013a"+
		"\3\2\2\2ab\7>\2\2bc\7/\2\2c\4\3\2\2\2de\7*\2\2e\6\3\2\2\2fg\7+\2\2g\b"+
		"\3\2\2\2hi\7<\2\2i\n\3\2\2\2jk\7r\2\2kl\7w\2\2lm\7u\2\2mn\7j\2\2n\f\3"+
		"\2\2\2op\7r\2\2pq\7q\2\2qr\7r\2\2r\16\3\2\2\2st\7v\2\2tu\7q\2\2uv\7r\2"+
		"\2v\20\3\2\2\2wx\7n\2\2xy\7k\2\2y\22\3\2\2\2z{\7o\2\2{|\7q\2\2|}\7x\2"+
		"\2}~\7g\2\2~\24\3\2\2\2\177\u0080\7n\2\2\u0080\u0081\7y\2\2\u0081\26\3"+
		"\2\2\2\u0082\u0083\7u\2\2\u0083\u0084\7y\2\2\u0084\30\3\2\2\2\u0085\u0086"+
		"\7n\2\2\u0086\u0087\7d\2\2\u0087\32\3\2\2\2\u0088\u0089\7u\2\2\u0089\u008a"+
		"\7d\2\2\u008a\34\3\2\2\2\u008b\u008c\7c\2\2\u008c\u008d\7f\2\2\u008d\u008e"+
		"\7f\2\2\u008e\36\3\2\2\2\u008f\u0090\7c\2\2\u0090\u0091\7f\2\2\u0091\u0092"+
		"\7f\2\2\u0092\u0093\7k\2\2\u0093 \3\2\2\2\u0094\u0095\7u\2\2\u0095\u0096"+
		"\7w\2\2\u0096\u0097\7d\2\2\u0097\"\3\2\2\2\u0098\u0099\7u\2\2\u0099\u009a"+
		"\7w\2\2\u009a\u009b\7d\2\2\u009b\u009c\7k\2\2\u009c$\3\2\2\2\u009d\u009e"+
		"\7o\2\2\u009e\u009f\7w\2\2\u009f\u00a0\7n\2\2\u00a0\u00a1\7v\2\2\u00a1"+
		"&\3\2\2\2\u00a2\u00a3\7o\2\2\u00a3\u00a4\7w\2\2\u00a4\u00a5\7n\2\2\u00a5"+
		"\u00a6\7v\2\2\u00a6\u00a7\7k\2\2\u00a7(\3\2\2\2\u00a8\u00a9\7f\2\2\u00a9"+
		"\u00aa\7k\2\2\u00aa\u00ab\7x\2\2\u00ab*\3\2\2\2\u00ac\u00ad\7f\2\2\u00ad"+
		"\u00ae\7k\2\2\u00ae\u00af\7x\2\2\u00af\u00b0\7k\2\2\u00b0,\3\2\2\2\u00b1"+
		"\u00b2\7d\2\2\u00b2\u00b3\7i\2\2\u00b3\u00b4\7v\2\2\u00b4.\3\2\2\2\u00b5"+
		"\u00b6\7d\2\2\u00b6\u00b7\7i\2\2\u00b7\u00b8\7g\2\2\u00b8\u00b9\7s\2\2"+
		"\u00b9\60\3\2\2\2\u00ba\u00bb\7d\2\2\u00bb\u00bc\7n\2\2\u00bc\u00bd\7"+
		"g\2\2\u00bd\u00be\7s\2\2\u00be\62\3\2\2\2\u00bf\u00c0\7d\2\2\u00c0\u00c1"+
		"\7n\2\2\u00c1\u00c2\7v\2\2\u00c2\64\3\2\2\2\u00c3\u00c4\7d\2\2\u00c4\u00c5"+
		"\7p\2\2\u00c5\u00c6\7g\2\2\u00c6\66\3\2\2\2\u00c7\u00c8\7c\2\2\u00c8\u00c9"+
		"\7p\2\2\u00c9\u00ca\7f\2\2\u00ca8\3\2\2\2\u00cb\u00cc\7q\2\2\u00cc\u00cd"+
		"\7t\2\2\u00cd:\3\2\2\2\u00ce\u00cf\7p\2\2\u00cf\u00d0\7q\2\2\u00d0\u00d1"+
		"\7v\2\2\u00d1<\3\2\2\2\u00d2\u00d3\7p\2\2\u00d3\u00d4\7g\2\2\u00d4\u00d5"+
		"\7i\2\2\u00d5>\3\2\2\2\u00d6\u00d7\7r\2\2\u00d7\u00d8\7t\2\2\u00d8\u00d9"+
		"\7k\2\2\u00d9\u00da\7p\2\2\u00da\u00db\7v\2\2\u00db@\3\2\2\2\u00dc\u00dd"+
		"\7t\2\2\u00dd\u00de\7g\2\2\u00de\u00df\7v\2\2\u00dfB\3\2\2\2\u00e0\u00e1"+
		"\7d\2\2\u00e1\u00e2\7g\2\2\u00e2\u00e3\7s\2\2\u00e3D\3\2\2\2\u00e4\u00e5"+
		"\7n\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7\7d\2\2\u00e7\u00e8\7g\2\2\u00e8"+
		"\u00e9\7n\2\2\u00e9F\3\2\2\2\u00ea\u00eb\7l\2\2\u00eb\u00ec\7c\2\2\u00ec"+
		"\u00ed\7n\2\2\u00edH\3\2\2\2\u00ee\u00ef\7d\2\2\u00ef\u00f0\7t\2\2\u00f0"+
		"\u00f1\7c\2\2\u00f1\u00f2\7p\2\2\u00f2\u00f3\7e\2\2\u00f3\u00f4\7j\2\2"+
		"\u00f4J\3\2\2\2\u00f5\u00f6\7l\2\2\u00f6\u00f7\7t\2\2\u00f7L\3\2\2\2\u00f8"+
		"\u00f9\7j\2\2\u00f9\u00fa\7c\2\2\u00fa\u00fb\7n\2\2\u00fb\u00fc\7v\2\2"+
		"\u00fcN\3\2\2\2\u00fd\u00fe\t\2\2\2\u00feP\3\2\2\2\u00ff\u0100\4\62;\2"+
		"\u0100R\3\2\2\2\u0101\u0102\7a\2\2\u0102T\3\2\2\2\u0103\u0105\7/\2\2\u0104"+
		"\u0103\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u010e\3\2\2\2\u0106\u010f\7\62"+
		"\2\2\u0107\u010b\4\63;\2\u0108\u010a\5Q)\2\u0109\u0108\3\2\2\2\u010a\u010d"+
		"\3\2\2\2\u010b\u0109\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u010f\3\2\2\2\u010d"+
		"\u010b\3\2\2\2\u010e\u0106\3\2\2\2\u010e\u0107\3\2\2\2\u010fV\3\2\2\2"+
		"\u0110\u0116\5O(\2\u0111\u0115\5O(\2\u0112\u0115\5U+\2\u0113\u0115\5S"+
		"*\2\u0114\u0111\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0113\3\2\2\2\u0115"+
		"\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117\3\2\2\2\u0117X\3\2\2\2"+
		"\u0118\u0116\3\2\2\2\u0119\u0128\7&\2\2\u011a\u011b\7v\2\2\u011b\u0129"+
		"\5Q)\2\u011c\u011d\7t\2\2\u011d\u0129\7c\2\2\u011e\u011f\7u\2\2\u011f"+
		"\u0129\7r\2\2\u0120\u0121\7h\2\2\u0121\u0129\7r\2\2\u0122\u0123\7c\2\2"+
		"\u0123\u0129\7\62\2\2\u0124\u0125\7c\2\2\u0125\u0129\7n\2\2\u0126\u0127"+
		"\7r\2\2\u0127\u0129\7e\2\2\u0128\u011a\3\2\2\2\u0128\u011c\3\2\2\2\u0128"+
		"\u011e\3\2\2\2\u0128\u0120\3\2\2\2\u0128\u0122\3\2\2\2\u0128\u0124\3\2"+
		"\2\2\u0128\u0126\3\2\2\2\u0129Z\3\2\2\2\u012a\u012c\t\3\2\2\u012b\u012a"+
		"\3\2\2\2\u012c\u012d\3\2\2\2\u012d\u012b\3\2\2\2\u012d\u012e\3\2\2\2\u012e"+
		"\u012f\3\2\2\2\u012f\u0130\b.\2\2\u0130\\\3\2\2\2\u0131\u0135\7=\2\2\u0132"+
		"\u0134\n\4\2\2\u0133\u0132\3\2\2\2\u0134\u0137\3\2\2\2\u0135\u0133\3\2"+
		"\2\2\u0135\u0136\3\2\2\2\u0136\u0138\3\2\2\2\u0137\u0135\3\2\2\2\u0138"+
		"\u0139\b/\2\2\u0139^\3\2\2\2\u013a\u013b\13\2\2\2\u013b\u013c\b\60\3\2"+
		"\u013c\u013d\3\2\2\2\u013d\u013e\b\60\4\2\u013e`\3\2\2\2\13\2\u0104\u010b"+
		"\u010e\u0114\u0116\u0128\u012d\u0135\5\b\2\2\3\60\2\2\3\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}